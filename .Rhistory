su<-similarity(user_emb,which="users",method="Euclidean")
su<-similarity(user_emb,which="users",method="Euclidean")
su<-similarity(as(user_emb,"sparseMatrix"),which="users",method="Euclidean")
# Extraer embeddings solo para usuarios objetivo
user_emb_obj <- user_emb[objetivos$obj, ]
# Calcular score para cada usuario objetivo y todos los ítems
scores <- user_emb_obj %*% t(item_emb)  # matriz 10 x n_items
# Calcular score para cada usuario objetivo y todos los ítems
scores = user_emb_obj %*% item_emb
# Para cada usuario, eliminar ítems ya vistos (filtrados)
for(i in seq_along(objetivos$obj)) {
user_idx <- objetivos$obj[i]
items_vistos <- which(matriz[user_idx, ] != 0)
scores[i, items_vistos] <- -Inf
}
# Obtener el índice del mejor ítem no visto para cada usuario
mejores_items <- apply(scores, 1, which.max)
# Resultado: dataframe con usuario y producto recomendado
resultado <- data.frame(
usuario = objetivos$obj,
producto_recomendado = mejores_items
)
print(resultado)
View(resultado)
library(dplyr)
shiny::runApp('C:/Users/aritz/OneDrive - Mondragon Unibertsitatea/Escritorio/BDATA1/Visiualización de datos/Hapiness')
df<-read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
library(plotly)
?plotly
plot_ly(data = df, x = df$Score, y = df$GDP.per.capita, color = "navyblue", type = "dispersion")
plot_ly(data = df, x = df$Score, y = df$GDP.per.capita, color = "navyblue", type = "scatter")
plot_ly(data = df, x = df$Score, y = df$GDP.per.capita, colors = "navyblue", type = "scatter")
library(shiny)
library(plotly)
df<-read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = vars, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = vars, selected = "GDP.per.capita")
),
mainPanel(
plotOutput("scatterPlot")
)
)
)
library(shiny)
library(plotly)
df<-read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = vars, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = vars, selected = "GDP.per.capita")
),
mainPanel(
plotOutput("scatterPlot")
)
)
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = vars, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = vars, selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
library(shiny)
library(plotly)
df<-read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = unique(df$Score), selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = unique(df$GDP.per.capita) , selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$scatterPlot <- renderPlotly({    plot_ly(data = df,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers",
colors = "navyblue",
text = ~paste("País:", data$Country.or.region,
"<br>", input$xvar, ":", get(input$xvar),
"<br>", input$yvar, ":", get(input$yvar)),
hoverinfo = "text") %>%
layout(xaxis = list(title = input$xvar),
yaxis = list(title = input$yvar))
})
}
# Run the application
shinyApp(ui = ui, server = server)
predicciones
library(ggplot2)
library(dplyr)
library(rsparse)
objetivos <- readRDS("Datos/objetivos.RDS")
sparsematrix<-readRDS("Datos/Transformados/matriz_binariaRsparse.RDS")
library(shiny)
library(plotly)
df<-read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = df$Score, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = df$GDP.per.capita, selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$scatterPlot <- renderPlotly({    plot_ly(data = df,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers",
colors = "navyblue",
text = ~paste("País:", data$Country.or.region,
"<br>", input$xvar, ":", get(input$xvar),
"<br>", input$yvar, ":", get(input$yvar)),
hoverinfo = "text") %>%
layout(xaxis = list(title = input$xvar),
yaxis = list(title = input$yvar))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
df<-read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
vars <- names(df)[3:ncol(df)]
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices =, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = , selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$scatterPlot <- renderPlotly({    plot_ly(data = df,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers",
colors = "navyblue",
text = ~paste("País:", data$Country.or.region,
"<br>", input$xvar, ":", get(input$xvar),
"<br>", input$yvar, ":", get(input$yvar)),
hoverinfo = "text") %>%
layout(xaxis = list(title = input$xvar),
yaxis = list(title = input$yvar))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
df<-read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
vars <- names(df)[3:ncol(df)]
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = vars, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = vars , selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$scatterPlot <- renderPlotly({    plot_ly(data = df,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers",
colors = "navyblue",
text = ~paste("País:", data$Country.or.region,
"<br>", input$xvar, ":", get(input$xvar),
"<br>", input$yvar, ":", get(input$yvar)),
hoverinfo = "text") %>%
layout(xaxis = list(title = input$xvar),
yaxis = list(title = input$yvar))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(readxl)
library(plotly)
# Cargar datos
data <- read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
vars <- names(data)[3:ncol(data)]  # Variables para los ejes (sin las dos primeras columnas)
colnames(data)
ui <- fluidPage(
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = vars, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = vars, selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlotly({
plot_ly(data,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers",
text = ~paste("País:", data$Country.or.region,
"<br>", input$xvar, ":", get(input$xvar),
"<br>", input$yvar, ":", get(input$yvar)),
hoverinfo = "text") %>%
layout(xaxis = list(title = input$xvar),
yaxis = list(title = input$yvar))
})
}
shinyApp(ui, server)
library(shiny)
library(readxl)
library(plotly)
# Cargar datos
data <- read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
vars <- names(data)[3:ncol(data)]
ui <- fluidPage(
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = vars, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = vars, selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlotly({
plot_ly(data,
x = ~input$xvar,
y = ~input$yvar,
type = "scatter",
mode = "markers",
text = ~paste("País:", data$Country.or.region,
"<br>", input$xvar, ":", get(input$xvar),
"<br>", input$yvar, ":", get(input$yvar)),
hoverinfo = "text") %>%
layout(xaxis = list(title = input$xvar),
yaxis = list(title = input$yvar))
})
}
shinyApp(ui, server)
library(shiny)
library(readxl)
library(plotly)
# Cargar datos
data <- read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
vars <- names(data)[3:ncol(data)]
ui <- fluidPage(
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = vars, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = vars, selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlotly({
plot_ly(data,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers",
text = ~paste("País:", data$Country.or.region,
"<br>", input$xvar, ":", get(input$xvar),
"<br>", input$yvar, ":", get(input$yvar)),
hoverinfo = "text") %>%
layout(xaxis = list(title = input$xvar),
yaxis = list(title = input$yvar))
})
}
shinyApp(ui, server)
library(shiny)
library(readxl)
library(plotly)
# Cargar datos
data <- read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
vars <- names(data)[3:ncol(data)]
ui <- fluidPage(
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = vars, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = vars, selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlotly({
plot_ly(data,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers"
})
library(shiny)
library(readxl)
library(plotly)
# Cargar datos
data <- read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
vars <- names(data)[3:ncol(data)]
ui <- fluidPage(
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = vars, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = vars, selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlotly({
plot_ly(data,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers")
})
}
shinyApp(ui, server)
library(shiny)
library(readxl)
library(plotly)
# Cargar datos
df <- read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
vars <- names(df)[3:ncol(df)]
ui <- fluidPage(
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = vars, selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = vars, selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlotly({
plot_ly(df,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers")
})
}
shinyApp(ui, server)
names(df)[3:ncol(df)]
library(shiny)
library(readxl)
library(plotly)
# Cargar datos
df <- read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
vars <- names(df)[3:ncol(df)]
ui <- fluidPage(
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = colnames(df), selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = colnames(df), selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlotly({
plot_ly(df,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers")
})
}
shinyApp(ui, server)
library(shiny)
library(readxl)
library(plotly)
# Cargar datos
df <- read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
ui <- fluidPage(
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = colnames(df), selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = colnames(df), selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlotly({
plot_ly(df,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
) +  add_markers()
})
}
shinyApp(ui, server)
library(shiny)
library(readxl)
library(plotly)
# Cargar datos
df <- read.csv("C:/Users/aritz/Downloads/happiness_2019.csv")
ui <- fluidPage(
titlePanel("Happiness"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Selecciona la variable x:", choices = colnames(df), selected = "Score"),
selectInput("yvar", "Selecciona la variable y:", choices = colnames(df), selected = "GDP.per.capita")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
server <- function(input, output) {
output$scatterPlot <- renderPlotly({
plot_ly(df,
x = ~get(input$xvar),
y = ~get(input$yvar),
type = "scatter",
mode = "markers")
})
}
shinyApp(ui, server)
matriz<-readRDS("Datos/Transformados/matriz_recomendacion")
matriz<-readRDS("Datos/Transformados/matriz_recomendacion")
matriz<-readRDS("Datos/Transformados/matriz_recomendacion")
matriz<-readRDS("Datos/Transformados/matriz_recomendacion.RDS")
library(dplyr)
library(rsparse)
objetivos <- readRDS("Datos/objetivos.RDS")
sparsematrix<-readRDS("Datos/Transformados/matriz_binariaRsparse.RDS")
#Segundo objetivo
objetivos<-objetivos[[2]]
library(recommenderlab)
library(ggplot2)
library(dplyr)
library(rsparse)
objetivos <- readRDS("Datos/objetivos.RDS")
sparsematrix<-readRDS("Datos/Transformados/matriz_binariaRsparse.RDS")
